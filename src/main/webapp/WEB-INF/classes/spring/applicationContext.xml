<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd"
	default-autowire="byName">
	<!-- 加载propertity文件,多个属性文件用逗号隔开,
	     PS:classpath路径表示的是部署到服务器下webapps/WEB-INF/classes，
 		  该classes文件夹存放的是src下的java文件编译好的class文件和一些配置文件
	-->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 配置需要扫描的包(service层)：spring自动去扫base-package下的类，如果扫描到的类上有
		 @Controller、@Service、@Component，@Repository等注解，
                  将会自动将类注册为bean（即由spring创建实例）
     -->
	<context:component-scan base-package="com.sprjjs.*.service.impl"></context:component-scan>
     
     <!-- 当proxy对象和真实对象转换错误时，
		    将proxy-target-class="true"，表示使用cglib动态代理，
		    默认为false，jdk动态代理。
	 -->
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>

	<!--使用注解装配时，用来使@AutoWired和@Resource注解生效-->
	<context:annotation-config/>

	<!-- 配置数据连接池,数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">       
	    <property name="driverClass" value="${c3p0.driverClass}"/>
	    <property name="jdbcUrl" value="${c3p0.jdbcUrl}"/>
	    <property name="user" value="${c3p0.user}"/>
	    <property name="password" value="${c3p0.password}"/>
		<!-- 其它配置 -->
		<!-- 初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default：3 -->
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>
		<!-- 连接池中保留的最小连接数。Default：3 -->
		<property name="minPoolSize" value="${c3p0.minPoolSize}"></property>
		<!-- 连接池中保留的最大连接数。Default：15 -->
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default：3 -->
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>
		<!--
		控制数据源内加载preparedStatement数量.如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default：0
		-->
		<property name="maxStatements" value="${c3p0.maxStatements}"></property>
		<!--
		maxStatementsPerConnection 定义了连接池内单个连接所拥有的最大缓存statements数。Default:0
		-->
		<property name="maxStatementsPerConnection" value="${c3p0.maxStatementsPerConnection}"></property>
		<!-- 最大空闲时间，1800 秒内未使用则连接被丢弃。若为0则永不丢弃。Default：0 -->
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>
	</bean>
	
	<!-- 配置事务管理器 (需要连接数据库)基于通知的，必须有切点才行-->
     <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" autowire="default">
      <!-- 数据库连接信息来自 datasource(使用自动注入时，property标签可以不写，但是要提供属性的set和get方法)-->
     </bean>
     
     <!-- 配置声明式事务(相当于通知类？
                    因为在执行事务的时候负责先开启事务，执行完事务后负责提交事务，回滚事务或关闭事务。
     	    在切面中引入) 。
     -->
     <tx:advice id="txAdvive" transaction-manager="txManager">
	      <tx:attributes>
	       <!-- 对哪些方法进行事务控制(一般都是对service层实现类下的增删改方法) 注意：
	        	  在切点中方法不能使用try，catch异常，因为这样可能会导致出现异常时，
	        	  由于切点中已经处理了异常，异常通知类就以为没有出现异常，所以不会触发异常
	        	  通知类，从而事务不能回滚。rollback-for的值表示切点出现的什么异常类型时
	        	  会事务回滚。
	        -->
		       <tx:method name="ins*" rollback-for="java.lang.Exception"/>
		       <tx:method name="regist*" rollback-for="java.lang.Exception"/>
		       <tx:method name="add*" rollback-for="java.lang.Exception"/>
		       <tx:method name="del*" rollback-for="java.lang.Exception"/>
		       <tx:method name="remove*" rollback-for="java.lang.Exception"/>
		       <tx:method name="upd*" rollback-for="java.lang.Exception"/>
		       <tx:method name="edit*" rollback-for="java.lang.Exception"/>
		       <!--查询:一般是设置只读权限 read-only-->
		       <tx:method name="*" read-only="true"/>
	      </tx:attributes>
     </tx:advice>

     <!-- 配置切面 (使用schema-based方式)-->
     <aop:config>
        <!-- 配置切点 (范围尽量设大点)-->
        <!-- *com.sprjjs.*.service.impl.*.*(..):
        	   表示一个项目下的任意模块下的service层下的任意一个
        	   类下的任意一个方法中的任意参数。
        	  特别注意：此处有个坑：*(中间必须有个空格)com.sprjjs...
        -->
        <aop:pointcut expression="execution(* com.sprjjs.*.service.impl.*.*(..))" id="myPointcut"/>
        <!-- 引入声明式事务通知类 -->
        <aop:advisor advice-ref="txAdvive" pointcut-ref="myPointcut"/>
     </aop:config>
	
	<!-- 创建SqlSessionFactory工厂，id不能起名sqlSessionFactory的原因：
		  因为org.mybatis.spring.mapper.MapperScannerConfigurer类中有
		  sqlSessionFactory该属性，然后会自动依赖注入，导致加载不到properties文件，
		  需要获取dataSource对象，因为连接上数据库后才能创建SqlSession进行CRUD操作。
	-->
	<bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--因为org.mybatis.spring.SqlSessionFactoryBean类中的dataSource属性
			与com.mchange.v2.c3p0.ComboPooledDataSource的id(类的标识符)相同，
			所以可以不用显示的依赖注入，spring会自动依赖注入
		-->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 给某个包下的所有类起别名 ，别名为类名（不区分大小写）-->
		<property name="typeAliasesPackage" value="com.sprjjs.*.pojo"></property>
		<!-- 引用mybatis分页插件 -->
        <property name="configLocation" value="classpath:mybatis/mybatis.xml"></property>
	</bean>
	
	<!--mapper层扫描器：相当于mybatis.xml中mapper标签下的子标签package,
          	     扫描com.sprjjs.mapper包下的xxxMapper.xml文件，
          	     同时也会给相对应的mapper接口创建代理实现类对象。
    -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sprjjs.*.mapper"></property>
		<!-- 和 factory 产生关系，使SqlSessionFactory中包含xxxMapper.xml映射文件内容 -->
        <!--需要将属性改为sqlSessionFactoryBeanName且设值注入，一定不能使用ref属性（依赖注入），
        	否则加载会加载不到properties文件 
        -->
		<property name="sqlSessionFactoryBeanName" value="factory"></property>
	</bean>
</beans>