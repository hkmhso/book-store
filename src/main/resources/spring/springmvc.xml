<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
        <!-- 配置需要扫描的包(service层)：spring自动去扫base-package下的类，
        	  如果扫描到的类上有 @Controller、@Service、@Component,@Repository等注解，
		          将会自动将类注册为bean（即由spring创建实例）
		-->
        <context:component-scan base-package="com.sprjjs.*.controller"></context:component-scan>
        
        <!--注解驱动，以使得请求路径url与方法的映射可以通过注解@RequsetMapping配置
        (DefaultAnnotationHandlerMapping，HandlerMapping的实现类),
        和处理控制器方法中的参数一些其它注解@RequestParam
        (AnnotationMethodHandlerAdapter，HandlerAdapter的实现类)生效，
        从3.1.x版本开始对应实现类改为了RequestMappingHandlerMapping和RequestMappingHandlerAdapter。-->
        <mvc:annotation-driven>
        	<!-- 解决restful风格不能获取路径中带有.后的内容，
        	          例如:localhost:8080/xxx/xxx.action,@pathVariable 会截取小数点前的内容，
        	          而小数点和小数点后的内容会被丢弃
        	--> 
        	<!-- 可选，根据项目需求而定 -->
        	<mvc:path-matching registered-suffixes-only="true"/>
        </mvc:annotation-driven>
        
        <!-- 配置自定义视图解析器(注意：如果HandleMethod中返回值中字符串带有redirect或forward，
        	 则自定义视图器无效，(注意：该两种跳转方式，/表示项目根目录)
        -->
        <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        	<!-- 注意：一般是设定于jsp文件的路径,而控制器的一般使用默认的视图解析器 -->
	        <property name="prefix" value="/WEB-INF/jsp/"></property>
	        <property name="suffix" value=".jsp"></property>
        </bean>
        
        <!--放行静态资源方式一:如html,css,js,images可以访问-->
		<mvc:default-servlet-handler />
        <!-- 放行静态资源方式二:(因为DispatchServlet只不过滤jsp，所以如果不放行静态资源，
        	 那么tomcat服务器会认为（除了jsp外）该uri是个控制器来着，从而会找不到资源，就会报404)
        	 location:项目中的路径格式， mapping:地址栏中uri的格式
        	（特别提示：/表示：项目根目录,**表示：该文件夹下的任意子文件及任意子文件夹下的任意文件，
        	  **是什么就往location中表示的目录下找到对应的文件就行了）
        -->
      	<!-- <mvc:resources location="/js/" mapping="/js/**"></mvc:resources>
        <mvc:resources location="/images/" mapping="/img/**"></mvc:resources>
        <mvc:resources location="/css/" mapping="/css/**"></mvc:resources>
        <mvc:resources location="/files/" mapping="/files/**"></mvc:resources> -->
        
        <!-- 配置文件解析器:文件上传和下载是需要用到（浏览器默认打开资源文件的特性为：inline（意思是能打开就打开，不能打开则下载）） -->
        <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
        	<!-- 设置服务器默认编码格式 -->
	        <property name="defaultEncoding" value="UTF-8"></property>
	        <!-- 最大上传文件的大小,根据项目需求配置-->
	        <property name="maxInMemorySize" value="10240000"></property>
	        <property name="maxUploadSize" value="104857600" />
        </bean> 
		
		<!-- 配置文件超出大小的异常映射解析器 -->
		<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
			<property name="exceptionMappings">
				<props>
					<!-- 上传文件失败时跳转的页面-->
					<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/error.jsp</prop>
				</props>
			</property>
		</bean>
		
		<!-- 配置拦截器:(只拦截控制器的，其他的不拦截)，而过滤器则拦截所有的请求 ，
			 包括静态资源，控制器，也包括jsp,(可配置多个,拦截器执行顺序与配置顺序有关)
		-->
		<mvc:interceptors>
			<mvc:interceptor>
				<!--  /**表示拦截所有资源,只不拦截jsp,
				            所以必须放行静态资源,/表示项目根目录,
				      mvc:mapping：拦截的url
				      mvc:exclude-mapping：不拦截的url 
				      PS:其他情况可以再通过拦截器中的方法进行拦截
				 表示拦截的路径 -->
	             <mvc:mapping path="/**" /> 
			     <!-- 放行静态资源,表示不拦截 -->
			     <mvc:exclude-mapping path="/**/fonts/**"/>
			     <mvc:exclude-mapping path="/**/books/**"/>
				 <mvc:exclude-mapping path="/**/css/**"/>
				 <mvc:exclude-mapping path="/**/js/**"/>
				 <mvc:exclude-mapping path="/**/img/**"/>
			     <!-- 引入自定义的拦截器类处理拦截，
			    	 特别注意：class属性不能使用通配符的形式，必须是具体的类路径全限定名  -->
			     <bean class="com.sprjjs.book.intercepter.LoginInterceptor"></bean>
		     </mvc:interceptor>
		</mvc:interceptors>
</beans>